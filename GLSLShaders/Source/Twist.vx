/*
    Marc-Antoine Desbiens
    October 2012
*/

uniform float TwistLevel;

varying vec3 tVertex;
varying vec3 tNorm;

void main(void)
{
	//Twist
	vec3 vertex = vec3(gl_Vertex);
	vec3 normal = vec3(gl_Normal);

	vec4 vertexTwist;
	vec3 normalTwist;
	
    //Twist the model using cosinus and sinus
	vertexTwist[0] = vertex[0]*cos(vertex[1]*TwistLevel) + vertex[2]*sin(vertex[1]*TwistLevel);
	vertexTwist[1] = vertex[1];
	vertexTwist[2] = -vertex[0]*sin(vertex[1]*TwistLevel) + vertex[2]*cos(vertex[1]*TwistLevel);
	vertexTwist[3] = 1.0;

	normalTwist[0] = normal[0]*cos(vertex[1]*TwistLevel) + normal[2]*sin(vertex[1]*TwistLevel);
	normalTwist[1] = normal[1];
	normalTwist[2] = -normal[0]*sin(vertex[1]*TwistLevel) + normal[2]*cos(vertex[1]*TwistLevel);

	//Transform the vertex
	tVertex = vec3(gl_ModelViewMatrix * vertexTwist);
	tNorm = normalize(gl_NormalMatrix * normalTwist);

	gl_Position = gl_ModelViewProjectionMatrix * vertexTwist;
}
